Updated 2015-12-04 by Peter Brown

A Brief Overview
-----------------------------------------
Each image folder should contain a matlab script "settings.m" which gives information about physical parameters (e.g. imaging system magnification) and how the file is to be analyzed. In the settings file it is possible (e.g. initial guesses for fitting, or software binning options).

The most important parameter in the "settings.m" file is the variable 'experiment'. Experiment specifies a specific analysis function to be run while the images are analyzed.
These analysis scripts are saved in "IMAGING DATA\Image Analysis\Experiment".

The most important function, which invokes all of the other analysis functions is "readfolder.m". Simply save a bunch of images in a folder with a settings file describing how you want them to be analyzed, and call readfolder on that path. Readfolder takes paths realtive to the IMAGING DATA folder. e.g. if you want to analyze "\\128.112.86.75\lithium\Imaging Data\2015\12\03\001_startup", you would call $readfolder('2015\12\03\001_startup').

readfolder will then continuously look in the given folder for new files, which it processes using the information from the settings file. As it analyzes each image file, it creates a subfolder of the process directory (the folder given as an argument to readfolder) called "processed" and adds information to a log file 'log.txt' also saved in the process folder.

My goal is to create a general frame work for analyzing images that rarely needs to be changed. Functions such as readfolder and its dependent function should not be edited, to the extent that is possible. All changes should be made in the 'experiment' functions saved in "IMAGING DATA\Image Analysis\Experiment". 


"readimg.m", the "settings.m" file, and the analysis file settings directs it to. "readfolder.m" also depends on "constants.m", which stores useful fundamental constants

Main Code
-----------------------------------------
readfolder is dependent on a number of utility functions. It only handles a few limited types of data: images, fits, values, and keywords. The functions in read folder should only produce and exchange these types of data. No direct processing of any of these should be done in readfolder. All utility functions will take these types of data as input and produce them as outputs.

The function works as follows
1. Adds all necessary subdirectores of Image Analysis to the matlab path so they may be used.
2. Instantiates a Class object containing fundamental constants. Using a class is convenient because it can be passed as an argument to functions,
	and no code outside of the class has to be modified if you want to add new items to the class.
3. Creates a lists of all the relevant log file paths, settings, and experiment functions for each folder given as the function argument.
4. Loops over these folders and analyzes data.
4a. Moves the file currently being analyzed the the 'processed' directory
4b. Reads the image information with the 'readimg.m' function
4c. Processes the image. In the code, this appears as 'CurrentExperimentFnHandler()'. This is a handle to a function, which readfolder gets from
	the settings file.
4d. Write values and keywords both read from the file and generated by the analysis to the log file using 'writeLog.m'. Note that these can be easily
	read into matlab using the 'parseLog.m' function if you want to use them later.
4e. The images and fits returned are displayed with showPlots(). The scale, limits, location, and presence of individual plots can be changed
	using the settings file.




File Viewer
-----------------------------------------
A tool for browsing imaging data is stored in "IMAGING DATA\File Viewer".

"fileviewer.m" and "fileviewer.fig" where created with the help of the matlab GUI tool. They are used for visualizing '.aia' files. They are dependent only on
"readimg.m".
