Updated 09/14/14
-----------------------------------
element_to_index.m
element_to_multiple.m
index_to_multiple.m
multiple_to_index.m

These files were designed to extract information from lists represented in different ways.
These lists are all of the form [-n*v,-(n-1)*v,...0,...n*v]. I wanted to be able to extract
the multiple m*V from the index and etc. There are better ways of keeping track of everything
that don't involve calling these functions. e.g. when one wants to loop over two such lists in 
a dictionary ordering, create a new array using the kronecker product.

These scripts are now deprecated.
-----------------------------------
OneDBand.m

This file takes a 1D potential and computes a 1D band structure. The number of reciprocal lattice vectors
to keep in the calculation, as well as the number of k values in the first Brillouin to compute are set
in the file
-----------------------------------
SepBand.m

This file was used to test TwoDBand for separable potentials. It should eventually be updated to return
bands in the same way that OneDBand and etc. do (i.e. as a matrix with each band a separate entry). This
requires some parsing of the 1D results as e.g. the second 2D band depends on two different combinations of
1D bands. (i.e. the first band in x and the second band in y, and the first band in y and the second band in x).
-----------------------------------
TwoDBand.m

This files takes a 2D potential and computer the band structue.
-----------------------------------
Floquet2D.m

This file is TwoDBand.m plus some more matrix manipulation to create the floquet Hamiltonian and diagonalize it.
Currently it runs rather slowly, and maybe FFT needs to be implemented instead of doing Fourier integrals.
-----------------------------------
getRecpBasis.m
WignerSeitz.m
reduceToWignerSeitz.m

These are helper functions for TwoDBand. Since lattices become much more complicated in 2D than in 1D these are
not needed in OneDBand. It would not be hard to modify these for a 3D lattice. The main difficulty in extending
this to a 3D lattice is keeping indexing straight and increasing the number of integrals that must be performed.

getRecpBasis.m solves for the reciprocal basis vectors given the real lattice basis vectors.

WignerSeitz.m tests whether a given point is in the Wigner Seitz cell of a lattice given by two basis vectors.

reduceToWignerSeitz.m takes a point and the basis vectors of a lattice and returns the equivalent point in the
Wigner Seitz unit cell.
